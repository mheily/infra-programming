<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
           "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<book lang="en_US">
<bookinfo>
<title>Elements of Infrastructure Programming</title>
<date>May 24, 2014 </date><author>
<firstname>Mark</firstname><surname>Heily</surname></author>
  <copyright>
    <year>2014</year>
    <holder>Mark Heily</holder>
</copyright>

<legalnotice>
<para>
Permission to use, copy, modify, and/or distribute this document for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.
</para>
<para>
THIS DOCUMENT IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS DOCUMENT INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OF THIS DOCUMENT.
</para>
</legalnotice>

</bookinfo>

<chapter>

<title>What is Infrastructure Programming?</title>

<section>

<title>Overview</title>
<para>
There are numerous specialties within the discipline of computer programming. Examples include:
<itemizedlist>
  <listitem>
    <para>
      Systems programming -- operating systems, compilers, etc.
    </para>
  </listitem>

  <listitem>
    <para>
      Application programming -- office suites, web browsers, etc.
    </para>
  </listitem>

  <listitem>
    <para>
      Scientific programming -- physics simulations, weather forcasting, etc.
    </para>
  </listitem>

  <listitem>
    <para>
      Financial programming -- banking software, automated stock trading, etc. 
    </para>
  </listitem>

</itemizedlist> 
</para>

<para>
This book introduces the concept of "infrastructure programming" as a distinct specialty within programming at large.
</para>

</section>

<section>
<title>Features</title>
<para>
There are several distinguishing features of infrastructure programming:
</para>
<orderedlist>
  <listitem>
    <para>
      The programs are usually designed to run unattended, at regular intervals, with no human interaction.
    </para>
  </listitem>

  <listitem>
    <para>
      The end users are system administrators, or other highly technical engineers.
    </para>
  </listitem>

  <listitem>
    <para>
      Programs often rely on querying multiple systems, such as DNS, LDAP, and other databases.
    </para>
  </listitem>

  <listitem>
    <para>
      The programmers are typically people who have a background in systems administration but limited experience with programming.
    </para>
  </listitem>

</orderedlist>
</section>
</chapter>

<chapter><title>Languages</title>

<para>
This chapter examines the suitability of various programming languages for use in infrastructure programming.
</para>

<para>
This examples in this book are written in Ruby, but many of the principles can be applied to any language. Ruby offers a good balance of simplicity and power, and is superficially similar to shell scripting. 
</para>

<section><title>Bash</title>
<para>
Pros:
</para>
<itemizedlist>
  <listitem>
    <para>
      Fast
    </para>
  </listitem>

  <listitem>
    <para>
      Easy to run shell commands and combine them into pipelines
    </para>
  </listitem>

  <listitem>
    <para>
      Tiny grammar and minimal syntax
    </para>
  </listitem>

  <listitem>
    <para>
      Part of the standard toolkit of most Unix administrators
    </para>
  </listitem>

</itemizedlist>

<para>
Cons:
</para>
<itemizedlist>
  <listitem>
    <para>
      Not object oriented.
    </para>
  </listitem>

  <listitem>
    <para>
      Limited functionality.
    </para>
  </listitem>

  <listitem>
    <para>
      The intent of the programmer is easily concealed behind a maze of pipes and external utilities.
    </para>
  </listitem>

  <listitem>
    <para>
      Functions are awkward to use; they have no prototypes, and can only return an integer value.
    </para>
  </listitem>

  <listitem>
    <para>
      Primitive support for arrays and hashes.
    </para>
  </listitem>

  <listitem>
    <para>
      No libraries for working with LDAP, JSON, HTML, HTTP, XML, DNS, etc.
    </para>
  </listitem>

</itemizedlist>

</section>
<section><title>Perl</title>

<para>Pros:</para>
<itemizedlist>

  <listitem>
    <para>
      Traditionally popular with Unix system administrators
    </para>
  </listitem>

  <listitem>
    <para>
      General-purpose programming language
    </para>
  </listitem>


  <listitem>
    <para>
      Flexible syntax - you can write compact one-liners for one-off tasks, or be verbose 
    </para>
  </listitem>

  <listitem>
    <para>
      Similar to shell scripting
    </para>
  </listitem>

  <listitem>
    <para>
      Many libraries available.
    </para>
  </listitem>

</itemizedlist>

<para>Cons:</para>
<itemizedlist>

  <listitem>
    <para>
      Not object-oriented
    </para>
  </listitem>

  <listitem>
    <para>
      More than one way to do things.
    </para>
  </listitem>

  <listitem>
    <para>
      High amount of syntactic sugar.
    </para>
  </listitem>
</itemizedlist>

</section>

<section><title>Ruby</title>

<para>Pros:</para>
<itemizedlist>

  <listitem>
    <para>
      Popular
    </para>
  </listitem>

  <listitem>
    <para>
      General-purpose programming language
    </para>
  </listitem>

  <listitem>
    <para>
      Everything is an object
    </para>
  </listitem>

  <listitem>
    <para>
      Flexible syntax - you can write compact one-liners for one-off tasks, or be verbose 
    </para>
  </listitem>

<listitem>
  <para>
    Similar to shell scripting
  </para>
</listitem>
</itemizedlist>

<para>Cons:</para>
<itemizedlist>
  <listitem>
    <para>
      More than one way to do things.
    </para>
  </listitem>

  <listitem>
    <para>
      Moderate amount of syntactic sugar.
    </para>
  </listitem>
</itemizedlist>

</section>

<section><title>Python</title>
<para>
Pros:
</para>
<itemizedlist>
  <listitem><para>Popular</para></listitem>
  <listitem><para>General-purpose programming language</para></listitem>
  <listitem><para>Simple grammar</para></listitem>
  <listitem><para>Limited syntactic sugar</para></listitem>
</itemizedlist>
<para>
Cons:
</para>

<itemizedlist>
  <listitem><para>Not a pure object-oriented language</para></listitem>
  <listitem><para>The standard library doesn't support exec(). You have to 'import os'</para></listitem>
  <listitem><para>Dissimilar to Bash</para>
  <orderedlist>
    <listitem><para>whitespace is significant</para></listitem>
    <listitem><para>mandatory parenthesis when calling functions</para></listitem>
  </orderedlist>
  </listitem>

  <listitem><para>Missing features</para>
  <orderedlist>
    <listitem><para>backticks</para></listitem>
    <listitem><para>case statements</para></listitem>
    <listitem><para>the $? variable</para></listitem>
    <listitem><para>string interpolation</para></listitem>
    <listitem><para>first class regular expressions</para></listitem>
    <listitem><para>control flow operators (&amp;&amp; and ||)</para></listitem>
  </orderedlist>
  </listitem>
</itemizedlist>
</section>
</chapter>

<chapter><title>Principles</title>
<para>DRY</para>
<para>KISS</para>
<para>Document the &ldquo;why&rdquo;</para>
<para>Check return codes and fail fast</para>
<para>Be defensive about inputs you accept</para>
<para>Be consistent</para>
<section>
<title>Don't Repeat Yourself (DRY)</title>

<para>
Here is an example of a program with duplicate logic:
</para>

<programlisting>

x = "hello"
x.upcase!
y = "John"
puts x + ' ' + y

x = "goodbye"
x.upcase!
y = "Fred"
puts x + ' ' + y

x = "hello"
x.upcase!
y = "Wanda"
puts x + ' ' + y

</programlisting>
<para>
To de-duplicate this program, use a function. Example:
<programlisting>
def say(action,person)
  action.upcase!
  puts action + ' ' + person
end

say 'hello', 'John'
say 'goodbye', 'Fred'
say 'hello', 'Wanda'
</programlisting>
</para>
<para>
<ulink url="http://programmer.97things.oreilly.com/wiki/index.php/Don't_Repeat_Yourself">See here</ulink> for more details.
</para>
</section>
</chapter>

<chapter><title>Data structures</title>

<section><title>Scalars</title>
<para>A scalar is a simple value, typically a string or a number.</para>

<example><title>Scalars</title>
<programlisting>
foo = 'hello'
myNumber = 123
</programlisting></example>
</section>

<section><title>Arrays</title>
<para>Arrays are ordered lists of items.</para>
<example><title>Arrays</title>
<programlisting>
numbers = [ 'one', 'two', 'three' ]
</programlisting></example>
</section>

<section><title>Hashes</title>
<para>
A Hash is a collection of key-value pairs. It is also called an associative array.
</para>
<example><title>Hashes</title>
<programlisting>
food_colors = { 
  'apple' => 'red', 
  'bannana' => 'yellow', 
  'grape' => 'green', 
}
</programlisting></example>
</section>

</chapter>

<chapter><title>Control structures</title>

<sect1><title>Entry point</title>
<para>Some languages have a function called main() that acts as the designated entry point for the program. Ruby does not have this concept, so execution just starts wherever the first statement is declared.
</para>
<example><title>Entry point</title><programlisting>
def sub1
  puts 'hi'
end

def sub2
  puts 'bye'
end

# Program execution starts here

sub1
sub2
exit 0

</programlisting></example>
</sect1>

<sect1><title>Exit point</title>
<para>
The program will exit when you call the 'exit' command. Use zero if there were no errors, and a non-zero exit code if there are errors.
</para>
<example><title>Exit point</title><programlisting>
exit 0
</programlisting></example>
</sect1>

<sect1><title>Simple conditionals</title>
<para>A "simple" conditional expresses an either/or situation.</para>
<example><title>Simple conditionals</title><programlisting>
if foo == 'bar'
  puts 'hi'
else
  puts 'bye'
end
</programlisting></example>
</sect1>

<sect1><title>Case statements</title>
<para>A case statement should be used if there are more than two possible conditions.</para>
<example><title>Case statements</title><programlisting>
case foo
when 'bar'
  puts 'hi'
when 'baz'
  puts 'ho'
else
  puts 'bye'
end
</programlisting></example>
</sect1>

<sect1><title>Iteration</title>
<para>Iteration is used to apply an action to each member of a list.</para>
<example><title>Iteration</title><programlisting>
items = [ 'one', 'two', 'three' ]

items.each do |x|
  puts x
end
</programlisting></example>
</sect1>

<sect1><title>Functions</title>
<para>Functions are reusable blocks of code.</para>
<example><title>Functions</title>
<programlisting>

def say(something)
  puts "*** #{something} ***"
end

say 'hello'
say 'my name is computer'
say 'goodbye'

</programlisting>
</example>
</sect1>



</chapter>

<chapter><title>Style</title>
<section><title>Parenthesis</title>
<para>Always use parenthesis when invoking methods. Avoid using parenthesis around simple function calls that only take a single argument.</para>
<example><title>Parenthesis</title>
<programlisting>
# Good
puts 'hi' or raise 'bye'

# Bad
puts('hi') or raise('bye')

# Good
File.new('/tmp/foo', 'w')

# Bad
File.new '/tmp/foo', 'w'
</programlisting>
</example>
</section>
</chapter>

<chapter><title>Elements of a Script</title>

<section><title>path to the script</title>
<para>When deploying to the global namespace, use a site-specific prefix. Typically this is constructed from the company's name; e.g Acme Software would use the prefix &ldquo;as&rdquo;. A command named foo could have the path /usr/bin/as-foo.</para>
<para>It would be even better to have a separate path for site-specific scripts. Then users can add this to their PATH. Example: /acme/bin/foo</para>
</section>

<section><title>The shebang line</title>
<para>Every script should have a shebang line</para>
<example><title>The shebang line</title>
<programlisting>
#!/usr/bin/ruby -w
</programlisting>
</example>
</section>


<section><title>The header</title>
<para>Every script should have a header</para>
<example><title>The header</title>
<programlisting>
#
# Synopsis of program
#
# Author: Foo Bar
#
</programlisting>
</example>
</section>

</chapter>

<chapter><title>Idioms</title>

<para>
In the context of programming, "idioms" are techniques for solving common problems. 
</para>

<sect1><title>Interpolation</title>
<para>You can insert Ruby code into a string by surrounding it with #{}</para>
<example><title>Interpolation</title>
<programlisting>
foo = 'happy'

puts "I am feeling #{foo} today"
</programlisting>
</example>
<para>
The above example prints "I am feeling happy today".
</para>
</sect1>

<sect1><title>Setting a variable based on the output of a command</title>
<para>Use backticks to run a command and capture the output. The chomp() method will remove the newline from the output.</para>
<programlisting>
x = `date +%Y-%m-%d`.chomp
</programlisting>
</sect1>

<sect1><title>Concurrency</title>
<para>
You should generally create a lockfile to avoid running multiple copies of the program concurrently.
</para>
<example><title>Concurrency</title><programlisting>
f = File.open('/var/run/myprogram.pid', File::RDWR|File::CREAT, 0644)
begin
  f1.flock(File::LOCK_EX)
  #
  # do important things here
  #
ensure
  f1.unlink
end
</programlisting></example>
<para>
This is a very simple example that doesn't use any timeouts.

More information about locking can be found <ulink url="http://www.codegnome.com/blog/2013/05/26/locking-files-with-ruby/">here</ulink>
</para>
</sect1>

<sect1><title>Logging</title>
<para>
There is a class called Logger that you can use for logging.
</para>
<example><title>Logging to STDERR</title><programlisting>
log = Logger.new(STDERR)
log.level = Logger::DEBUG

log.debug("Created logger")
log.info("Program started")
# do something here...
log.info("Program is over")
</programlisting></example>
<para>
The previous example will print all log messages to STDERR. Most of the time, you will want to write to a logfile. Here's an example that writes to a logfile. The logfile is rotated once it reaches one megabyte in size, and up to ten old logfiles are preserved.
</para>
<example><title>Logging to a file</title><programlisting>
log = Logger.new('/var/log/myprogram.log', 10, 1024000)
log.level = Logger::WARN

log.debug("Created logger")
log.info("Program started")
# do something here...
log.info("Program is over")
</programlisting></example>
</sect1>


<sect1><title>Configuration files</title>
<para>You can use YAML to define a configuration file containing simple key-value pairs. Given the following configuration file:</para>
<programlisting>
debug: true
server: 'myserver.acme.com'
port: 8080
</programlisting>
<para>
You could read this into a hash named 'config' like so:
</para>
<example><title>Reading a configuration file</title><programlisting>
require 'yaml'

config = YAML.load_file('/etc/my_config_file')
puts config['server'] + ':' + config['port']
</programlisting></example>
</sect1>

<sect1><title>Creating temporary files</title>
<para>Temporary files need to be created in a secure manner.</para>
<example><title>Creating temporary files</title><programlisting>
require 'tempfile'
f = Tempfile.new("blah")
f.puts('hi')
f.flush
system("cat #{ f.path }")
</programlisting></example>
<para>The above example will create a temporary file with the first part of the name being "blah". The file will be automatically deleted when the program exits.</para>
</sect1>

<sect1><title>Exception handling</title>
<para>Sometimes you need to clean up after your script when it fails.</para>
<example><title>Exception handling</title><programlisting>
f = File.open("tempfile", "w")
begin
  f.write "hello"
rescue
  # .. handle error, if you can
ensure
  f.close unless f.nil?
end
</programlisting></example>

</sect1>

<sect1><title>Setting a timeout</title>
<example><title>Setting a timeout</title><programlisting>
require 'timeout'

begin
  Timeout.timeout(1) do      
   sleep(2)
  end
rescue Timeout::Error
  puts 'Operation took too long, giving up..'
end
</programlisting></example>
<para>
The above example will fail with a timeout error, because it is given a timeout of 1 second but sleeps for two seconds.
</para>
</sect1>

<sect1><title>Reading each line of a file</title>
<example><title>Reading each line of a file</title><programlisting>
File.readlines('/etc/hosts').each do |line|
  puts line unless line =~ /localhost/
end
</programlisting></example>
<para>
The above example will display all of the lines in /etc/hosts, except for the ones that include the word 'localhost'
</para>
</sect1>

<sect1><title>Running system commands</title>
<para>Sometimes, you need to run some system commands and make sure they complete successfully.</para>
<example><title>Running system commands</title><programlisting>
system 'pgrep foo' or raise 'the foo process has died'
</programlisting></example>
</sect1>


<sect1><title>Parsing command line options</title>
<example><title>Parsing command line options</title><programlisting>
require 'optparse'

options = {
  'uri' => nil,
  'verbose' => false,
}

optparse = OptionParser.new do |opts|
  opts.on( '--verbose', 'Display extra debugging information') do |arg|
    options['verbose'] = true
  end

  opts.on( '--uri URI', 'The URI to access') do |arg|
    options['uri'] = arg
  end

  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

optparse.parse!

raise '--uri is required' if uri.nil?

</programlisting></example>
<para>
For more information about using the OptionParser library, see <ulink url="http://ruby.about.com/od/advancedruby/a/optionparser2.htm">this tutorial</ulink>
</para>
</sect1>

</chapter>

<chapter><title>Complete Examples</title>
<programlisting>
#!/usr/bin/ruby
#
# Hello world
#
# Author:    John Doe
#

puts 'hello world'
exit 0
</programlisting>
</chapter>

<chapter><title>Advanced Topics</title>
<para>
</para>
<sect1><title>Data types</title>

<sect2><title>Global variables</title>
<para>Global variables should be avoided. If you have to use them, use the dollar sign.</para>
<example><title>Global variables</title>
<programlisting>
$my_global = 'hello'
</programlisting>
</example>
</sect2>

<sect2><title>Constants</title>
<para>A constant is something that never changes. It is typically written in ALL_CAPS</para>
<example><title>Constants</title>
<programlisting>
PI = 3.14
</programlisting></example>
<para>
If you try to modify a constant, it will generate a warning.
</para>
</sect2>

<sect2><title>Symbols</title>
<para>
Symbol objects represent names and some strings inside the Ruby interpreter. They are typically used for efficiency reasons.
</para>
<example><title>Symbols</title>
<programlisting>
presidents = [
   { :first => 'Barack', :last => 'Obama', },
   { :first => 'George', :middle => 'W', :last => 'Bush' }
   { :first => 'Bill', :last => 'Clinton' },
   # .... and so on
}
</programlisting></example>
<para>
In the above example, the use of :first and :last is more efficient because it uses less memory.
</para>
</sect2>

</sect1>
</chapter>

<chapter><title>Recommended Reading</title>
<itemizedlist>
<listitem>
<para>
<ulink url="http://www.caliban.org/ruby/rubyguide.shtml">The Unofficial Ruby Usage Guide</ulink>
</para>
</listitem>
</itemizedlist>
</chapter>

<appendix>
<title>Bash to Ruby</title>
<para>
<table frame='all'>
  <title>Bash concepts translated to Ruby</title>
  <tgroup cols='3' align='left' colsep='1' rowsep='1'>
    <colspec colname='c1'  colwidth="1*"/>
    <colspec colname='c2'  colwidth="1*"/>
    <colspec colname='c3'  colwidth="1*"/>
    <thead>
      <row>
        <entry>Concept</entry>
        <entry>Bash</entry>
        <entry>Ruby</entry>
      </row>
    </thead>
    <tbody>
      <row>
	<entry>Iteration</entry>
        <entry><programlisting>
for x in one two three
do
  echo $x
done
	</programlisting>
</entry>
<entry><programlisting>
['one', 'two', 'three'].each do |x|
  puts x
end
</programlisting>
</entry>
      </row>

      <row>
	<entry>Conditionals</entry>
        <entry><programlisting>
if [[ "$foo" = "bar" ]] 
then
  echo hi
else
  echo bye
fi
	</programlisting>
</entry>
<entry><programlisting>
if foo == 'bar'
  puts 'hi'
else
  puts 'bye'
end
</programlisting>
</entry>
      </row>


      <row>
	<entry>Case statement</entry>
        <entry><programlisting>
case $foo
"bar")
    echo "hi"
    ;;
"baz")
    echo "ho"
    ;;
*)
    echo "bye"
    ;;
esac
	</programlisting>
</entry>
<entry><programlisting>
case foo
when 'bar'
  puts 'hi'
when 'baz'
  puts 'ho'
else
  puts 'bye'
end
</programlisting>
</entry>
      </row>

      <row>
	<entry>String interpolation</entry>
        <entry><programlisting>
foo="John Smith"
echo "Hello ${foo}"
	</programlisting>
</entry>
<entry><programlisting>
foo = "John Smith"
puts "Hello #{foo}"
</programlisting>
</entry>
      </row>


      <row>
	<entry>Functions</entry>
        <entry><programlisting>
say() {
    text=$1

    echo "*** ${text} ***"
}

say 'How are you?'
say 'I am fine.'
	</programlisting>
</entry>
<entry><programlisting>
def say(text)
  puts "*** #{text} ***"
end

say 'How are you?'
</programlisting>
</entry>
      </row>

      <row>
	<entry>Regular Expressions</entry>
        <entry><programlisting>
number="123456"

if [[ "$number" =~ ^[0-9]+$ ]] ; then
  echo "The number is ${number}"
else
  echo "Illegal value; a number is required"
  exit 1
fi
	</programlisting>
</entry>
<entry><programlisting>
number = '123456'

if $number =~ ^[0-9]+$ 
  puts "The number is #{number}"
else
  raise 'Illegal value; a number is required'
end
</programlisting>
</entry>
      </row>


      <row>
	<entry>Run an external command, and capture the output</entry>
        <entry><programlisting>
date=`date`
	</programlisting>
</entry>
<entry><programlisting>
date = `date`.chomp
</programlisting>
</entry>
      </row>


      <row>
	<entry>Run an external command, with error checking</entry>
        <entry><programlisting>

# Version 1: less compact

/usr/bin/foo --arg1 --arg2
if [ $? != 0 ] 
then
    echo "error running foo"
    exit 1
fi

# Version 2: more compact

/usr/bin/foo --arg1 --arg2 \
    || ( echo 'error running foo' ; exit 1 )

	</programlisting>
</entry>
<entry><programlisting>

# Version 1: less compact
 
system '/usr/bin/foo --arg1 --arg2'
if $? != 0  
  raise 'error running foo'
end

# Version 2: more compact

system '/usr/bin/foo --arg1 --arg2' \
  || raise 'error running foo'

</programlisting>
</entry>
      </row>

    </tbody>
  </tgroup>
</table> 
</para>
</appendix>

</book>

